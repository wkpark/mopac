      SUBROUTINE FLEPO (XPARAM,NVAR,FUNCT1)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INCLUDE 'SIZES'
      DIMENSION XPARAM(*)
      COMMON /KEYWRD/ KEYWRD
      COMMON /LAST  / LAST
      COMMON /PATH  / LATOM,LPARAM,REACT(100)
      COMMON /GRADNT/ GRAD(MAXPAR),GNORM
      COMMON /MESAGE/ IFLEPO,ISCF
      COMMON /TIME  / TIME0
      COMMON /FMATRX/ HESINV(MAXHES)
      COMMON /NUMCAL/ NUMCAL
      COMMON /GRAVEC/ COSINE
      CHARACTER*80 KEYWRD
      CHARACTER SPACE*1, CHDOT*1, ZERO*1, NINE*1, CH*1
C
C     *
C     THIS SUBROUTINE ATTEMPTS TO MINIMIZE A REAL-VALUED FUNCTION OF
C     THE N-COMPONENT REAL VECTOR XPARAM ACCORDING TO THE
C     DAVIDON-FLETCHER-POWELL ALGORITHM (COMPUTER JOURNAL, VOL. 6,
C     P. 163).  THE USER MUST SUPPLY THE SUBROUTINE
C     COMPFG(NVAR,XPARAM,FUNCT,GRAD,1)
C     WHICH COMPUTES FUNCTION VALUES  FUNCT  AND GRADIENTS  GRAD ATGIVEN
C     VALUES FOR THE VARIABLES XPARAM.  THE MINIMIZATION PROCEEDS BY A
C     SEQUENCE OF ONE-DIMENSIONAL MINIMIZATIONS.  THESE ARE CARRIED OUT
C     BY THE SUBROUTINE LINMIN, WHICH SOLVES THE SUBPROBLEM OF
C     MINIMIZING THE FUNCTION FUNCT ALONG THE LINE XPARAM+ALPHA*PVECT,
C     WHERE XPARAM
C     IS THE VECTOR OF CURRENT VARIABLE VALUES,  ALPHA IS A SCALAR
C     VARIABLE, AND  PVECT  IS A SEARCH-DIRECTION VECTOR PROVIDED BY THE
C     DAVIDON-FLETCHER-POWELL ALGORITHM.  EACH ITERATION STEP CARRIED
C     OUT BY FLEPO PROCEEDS BY LETTING LINMIN FIND A VALUE FOR ALPHA
C     WHICH MINIMIZES  FUNCT  ALONG  XPARAM+ALPHA*PVECT, BY
C     UPDATING THE VECTOR  XPARAM  BY THE AMOUNT ALPHA*PVECT, AND
C     FINALLY BY GENERATING A NEW VECTOR  PVECT.  UNDER
C     CERTAIN RESTRICTIONS (POWELL, J.INST.MATHS.APPLICS.(1971),
C     V.7,21-36)  A SEQUENCE OF FUNCT VALUES CONVERGING TO SOME
C     LOCAL MINIMUM VALUE AND A SEQUENCE OF
C     XPARAM VECTORS CONVERGING TO THE CORRESPONDING MINIMUM POINT
C     ARE PRODUCED.
C                          CONVERGENCE TESTS.
C
C     HERBERTS TEST: THE ESTIMATED DISTANCE FROM THE CURRENT POINT
C                    POINT TO THE MINIMUM IS LESS THAN TOLERA.
C
C                    "HERBERTS TEST SATISFIED - GEOMETRY OPTIMISED"
C
C     GRADIENT TEST: THE GRADIENT NORM HAS BECOME LESS THAN TOLERG
C                    TIMES THE SQUARE ROOT OF THE NUMBER OF VARIABLES.
C
C                    "TEST ON GRADIENT SATISFIED".
C
C     XPARAM TEST:  THE RELATIVE CHANGE IN XPARAM, MEASURED BY ITS NORM,
C                   OVER ANY TWO SUCCESSIVE ITERATION STEPS DROPS BELOW
C                   TOLERX.
C
C                    "TEST ON XPARAM SATISFIED".
C
C     FUNCTION TEST: THE CALCULATED VALUE OF THE HEAT OF FORMATION
C                    BETWEEN ANY TWO CYCLES IS WITHIN TOLERF OF
C                    EACH OTHER.
C
C                    "HEAT OF FORMATION TEST SATISFIED"
C
C     FOR THE GRADIENT, FUNCTION, AND XPARAM TESTS A FURTHER CONDITION,
C     THAT NO INDIVIDUAL COMPONENT OF THE GRADIENT IS GREATER
C     THAN TOLERG, MUST BE SATISFIED, IN WHICH CASE THE
C     CALCULATION EXITS WITH THE MESSAGE
C
C                     "PETERS TEST SATISFIED"
C
C     AN UNSUCCESSFUL TERMINATION WILL TAKE PLACE AFTER
C     COMPFG HAS BEEN CALLED MORE TIMES THAN THE USER-SUPPLIED VALUE
C     OF MAXEND.  IN THIS CASE THE COMMENT
C
C                     "*** TERMINATION FROM TOO MANY COUNTS ***"
C
C     WILL BE PRINTED, AND FUNCT AND XPARAM WILL CONTAIN THE LAST
C     FUNCTION VALUE CUM VARIABLE VALUES REACHED.
C
C     SIMILAR UNSUCCESSFUL TERMINATIONS WILL TAKE PLACE IF THE COSINE OF
C     THE SEARCH DIRECTION TO GRADIENT VECTOR IS LESS THAN RST ON TWO
C     CONSECUTIVE ITERATIONS.
C
C     THE DAVIDON-FLETCHER-POWELL ALGORITHM CHOOSES SEARCH DIRECTIONS
C     ON THE BASIS OF LOCAL PROPERTIES OF THE FUNCTION.  A MATRIX  H,
C     WHICH IN FLEPO IS PRESET WITH THE IDENTITY, IS MAINTAINED AND
C     UPDATED AT EACH ITERATION STEP.  THE MATRIX DESCRIBES A LOCAL
C     METRIC ON THE SURFACE OF FUNCTION VALUES ABOVE THE POINT XPARAM.
C     THE SEARCH-DIRECTION VECTOR  PVECT  IS SIMPLY A TRANSFORMATION
C     OF THE GRADIENT  GRAD  BY THE MATRIX H.  THE USER MAY THROW OUT  H
C     AFTER EACH  NRST ITERATION STEPS (RESTARTING WITH THE IDENTITY) OR
C     WHENEVER THE COSINE OF THE ANGLE BETWEEN  GRAD  AND PVECT BECOMES
C     LESS THAN RST. THIS CAN BE SUPPRESSED ENTIRELY IF NRST .GT. MAXEND
C     AND RST .LT. 0.0.   RESTARTING IS DISCUSSED MARGINALLY IN THE
C     PAPER BY FLETCHER AND POWELL, BUT THERE ARE NO GOOD RULES ABOUT
C     WHEN OR WHETHER THIS SHOULD BE DONE FOR ANY GIVEN FUNCTION.
C
      DIMENSION XD(MAXPAR), GD(MAXPAR), GLAST(MAXPAR), MDFP(9),XDFP(9),
     1          XLAST(MAXPAR), GG(MAXPAR), PVECT(MAXPAR)
      LOGICAL OKF, OKC, PRINT,  TIME, RESTRT, MINPRT, SADDLE, GEOOK
     1        ,RESET
      EQUIVALENCE (MDFP(1),JCYC  ),(MDFP(2),JNRST),(MDFP(3),NCOUNT),
     1            (MDFP(4),LNSTOP),(XDFP(1),ALPHA),(XDFP(2),COS   ),
     2            (XDFP(3),PNORM ),(XDFP(4),YEAD ),(XDFP(5),DEL   ),
     3            (XDFP(6),FREPF ),(XDFP(7),CYCMX),(XDFP(8),TOTIME)
      DATA ICALCN /0/
      DATA SPACE,CHDOT,ZERO,NINE /' ','.','0','9'/
      IF (ICALCN.NE.NUMCAL) THEN
C
C   THE FOLLOWING CONSTANTS SHOULD BE SET BY THE USER.
C
         RST   = 0.05D0
         MAXEND= 9999
         TDEL  = 6.D0
         NRST  = 30
         SFACT=1.5
         PMSTE = 0.1D0
         DELL  = 0.01D0
         EINC  = 0.3D0
         IGG1  = 3
         DEL=DELL
C
C    THESE CONSTANTS SHOULD BE SET BY THE PROGRAM.
C
         RESTRT   = (INDEX(KEYWRD,'RESTART').NE.0)
         GEOOK   = (INDEX(KEYWRD,'GEO-OK').NE.0)
         TIME   = (INDEX(KEYWRD,'TIME').NE.0)
         TLEFT=3600
         TOLERG=1.0D0
         CONST=1.D0
         CCN=NVAR
         IF(INDEX(KEYWRD,'GNORM=').NE.0) THEN
            TOLERG=READA(KEYWRD,INDEX(KEYWRD,'GNORM='))
            ROOTV=1.D0
            CONST=1.D-10
         ELSE
            ROOTV=SQRT(CCN+1.D-5)
         ENDIF
         MINPRT=(INDEX(KEYWRD,'SADDLE')+INDEX(KEYWRD,'SADDLE') .EQ.0)
         SADDLE=(INDEX(KEYWRD,'SADDLE') .NE.0)
         IF( .NOT. MINPRT) MINPRT=(INDEX(KEYWRD,'DEBUG') .NE. 0)
         I=INDEX(KEYWRD,' T=')
         IF(I.NE.0) THEN
            TIM=READA(KEYWRD,I)
            DO 10 J=I+3,80
               CH=KEYWRD(J:J)
               IF( CH .NE. CHDOT .AND. (CH .LT. ZERO .OR. CH .GT. NINE))
     1 THEN
                  IF( CH .EQ. 'M') TIM=TIM*60
                  GOTO 20
               ENDIF
   10       CONTINUE
   20       TLEFT=TIM
         ENDIF
         TX2=SECOND()
         TLEFT=TLEFT-TX2+TIME0
         PRINT  = (INDEX(KEYWRD,'FLEPO').NE.0)
         TOLERX = 0.0001D0*CONST
         EYEAD  = 0.0010D0*CONST
         TOLERF = 0.002D0*CONST
         TOLRG  = TOLERG
         IF (INDEX(KEYWRD,'FORCE') .NE. 0) THEN
            TOLERX = 0.00001D0
            TOLERF = 0.0002D0
            TOLERG = 0.1D0
            EYEAD  = 0.00010D0
         ENDIF
         IF(INDEX(KEYWRD,'PREC') .NE. 0) THEN
            TOLERX=TOLERX*0.01D0
            EYEAD=EYEAD*0.01D0
            TOLERF=TOLERF*0.01D0
            TOLERG=TOLERG*0.02D0
         ENDIF
         TOLERG=TOLERG/ROOTV
      ENDIF
C
C   THE FOLLOWING CONSTANTS SHOULD BE SET TO SOME ARBITARY LARGE VALUE.
C
      YEAD  = 1.D15
      FREPF = 1.D15
C
C     AND FINALLY, THE FOLLOWING CONSTANTS ARE CALCULATED.
C
      IHDIM=(NVAR*(NVAR+1))/2
      CNCADD=1.0D00/ROOTV
      IF (CNCADD.GT.0.15D00) CNCADD=0.15D00
C
C     FIRST, WE INITIALISE THE VARIABLES.
C
      JCYC=0
      LNSTOP=1
      IREPET=1
      ALPHA = 1.0D00
      PNORM=1.0D00
      JNRST=0
      CYCMX=0.D0
      COS=0.0D00
      TOTIME=0.D0
      NCOUNT=1
      IF( SADDLE) THEN
*
*   WE DON'T NEED HIGH PRECISION DURING A SADDLE-POINT CALCULATION.
*
         IF(NVAR.GT.0)GNORM=SQRT(DOT(GRAD,GRAD,NVAR))-3.D0
         IF(GNORM.GT.10.D0)GNORM =10.D0
         IF(GNORM.GT.1.D0) TOLERG=TOLRG*GNORM
         WRITE(6,'('' GRADIENT CRITERION IN FLEPO ='',F12.5)')TOLERG
      ENDIF
      IF (RESTRT .AND. ICALCN .NE. NUMCAL) THEN
         MDFP(9)=0
         CALL DFPSAV(TOTIME,XPARAM,GD,XLAST,FUNCT1,MDFP,XDFP)
         WRITE(6,'(//10X,''TOTAL TIME USED SO FAR:'',
     1    F13.2,'' SECONDS'')')TOTIME
         IF(INDEX(KEYWRD,'1SCF') .NE. 0) THEN
            CALL COMPFG (XPARAM, .TRUE., FUNCT1,.TRUE.,GRAD,.TRUE.)
            IFLEPO=1
            RETURN
         ENDIF
      ELSE
         TOTIME=0.D0
C
C CALCULATE THE VALUE OF THE FUNCTION -> FUNCT1, AND GRADIENTS -> GRAD.
C NORMAL SET-UP OF FUNCT1 AND GRAD, DONE ONCE ONLY.
C
         CALL COMPFG (XPARAM, .TRUE., FUNCT1,.TRUE.,GRAD,.TRUE.)
         DO 30 I=1,NVAR
   30    GD(I)=GRAD(I)
      ENDIF
      ICALCN=NUMCAL
      IF(NVAR.NE.0)GNORM=SQRT(DOT(GRAD,GRAD,NVAR))
      IFLEPO=1
      IF(INDEX(KEYWRD,'1SCF') .NE. 0) RETURN
      IFLEPO=2
      IF(GNORM.LT.TOLERG.OR.NVAR.EQ.0) THEN
         IF(RESTRT)
     1 CALL COMPFG (XPARAM, .TRUE., FUNCT1,.TRUE.,GRAD,.TRUE.)
         RETURN
      ENDIF
      TX1 =  SECOND()
      TLEFT=TLEFT-TX1+TX2
C     *
C     START OF EACH ITERATION CYCLE ...
C     *
C
      RESET=.FALSE.
      GOTO 60
   40 CONTINUE
      IF(COS .LT. RST) THEN
         DO 50 I=1,NVAR
   50    GD(I)=0.5D0
      ENDIF
   60 CONTINUE
      GNORM=SQRT(DOT(GRAD,GRAD,NVAR))
      JCYC=JCYC+1
      JNRST=JNRST+1
      IF (LNSTOP.NE.1 .AND. COS.GT.RST .AND. JNRST.LT.NRST) GOTO 160
C
C     *
C     RESTART SECTION
C     *
C
   70 CONTINUE
      RESET=.TRUE.
      DO 80 I=1,NVAR
         XD(I)=XPARAM(I)-SIGN(DEL,GRAD(I))
   80 CONTINUE
C
C THIS CALL OF COMPFG IS USED TO CALCULATE THE SECOND-ORDER MATRIX IN H
C IF THE NEW POINT HAPPENS TO IMPROVE THE RESULT, THEN IT IS KEPT.
C OTHERWISE IT IS SCRAPPED, BUT STILL THE SECOND-ORDER MATRIX IS O.K.
C
      CALL COMPFG (XD, .TRUE., FUNCT2,.TRUE.,GD,.TRUE.)
      IF(.NOT. GEOOK .AND. SQRT(DOT(GD,GD,NVAR))/GNORM.GT.10.
     1 AND.GNORM.GT.20.AND.JCYC.GT.2)THEN
C
C  THE GEOMETRY IS BADLY SPECIFIED IN THAT MINOR CHANGES IN INTERNAL
C  COORDINATES LEAD TO LARGE CHANGES IN CARTESIAN COORDINATES, AND THESE
C  LARGE CHANGES ARE BETWEEN PAIRS OF ATOMS THAT ARE CHEMICALLY BONDED
C  TOGETHER.
         WRITE(6,'('' GRADIENTS OF OLD GEOMETRY, GNORM='',F13.6)')GNORM
         WRITE(6,'(6F12.6)')(GRAD(I),I=1,NVAR)
         GDNORM=SQRT(DOT(GD,GD,NVAR))
         WRITE(6,'('' GRADIENTS OF NEW GEOMETRY, GNORM='',F13.6)')GDNORM
         WRITE(6,'(6F12.6)')(GD(I),I=1,NVAR)
         WRITE(6,'(///20X,''CALCULATION ABANDONED AT THIS POINT!'')')
         WRITE(6,'(//10X,'' SMALL CHANGES IN INTERNAL COORDINATES ARE'',
     1/10X,'' CAUSING A LARGE CHANGE IN THE DISTANCE BETWEEN'',/
     210X,'' CHEMICALLY-BOUND ATOMS. THE GEOMETRY OPTIMISATION'',/
     310X,'' PROCEDURE WOULD LIKELY PRODUCE INCORRECT RESULTS'')')
         CALL GEOUT
         STOP
      ENDIF
      NCOUNT=NCOUNT+1
      DO 90 I=1,IHDIM
   90 HESINV(I)=0.0D00
      DO 120 I=1,NVAR
         II=I+NVAR*(I-1)-((I*(I-1))/2)
         GGGGG=GRAD(I)-GD(I)
         IF (ABS(GGGGG).LT.1.D-12) GO TO 100
         GGD=ABS(GRAD(I))
         IF (FUNCT2.LT.FUNCT1) GGD=ABS(GD(I))
         HESINV(II)=SIGN(DEL,GRAD(I))/GGGGG
         IF (HESINV(II).LT.0.0D00.AND.GGD.LT.1.D-12) GO TO 100
         IF (HESINV(II).LT.0.0D00) HESINV(II)=(TDEL*DEL)/GGD
         GO TO 110
  100    HESINV(II)=0.01D00
  110    CONTINUE
         IF (GGD.LT.1.D-12) GGD=1.D-12
         PMSTEP=ABS(PMSTE/GGD)
         IF (HESINV(II).GT.PMSTEP) HESINV(II)=PMSTEP
  120 CONTINUE
      JNRST=0
      IF(JCYC.LT.2) COSINE=1.D0
      IF(FUNCT2 .GE. FUNCT1) THEN
         IF(PRINT)WRITE (6,130) FUNCT1,FUNCT2
  130    FORMAT (' FUNCTION VALUE=',F13.7,
     1 '  WILL NOT BE REPLACED BY VALUE=',F13.7,/10X,
     2 'CALCULATED BY RESTART PROCEDURE',/)
         CALL COMPFG (XPARAM, .TRUE., FUNCT1,.TRUE.,GD,.FALSE.)
         COSINE=1.D0
      ELSE
         IF( PRINT ) WRITE (6,140) FUNCT1,FUNCT2
  140    FORMAT (' FUNCTION VALUE=',F13.7,
     1' IS BEING REPLACED BY VALUE=',F13.7,/10X,
     2' FOUND IN RESTART PROCEDURE',/,6X,
     3'THE CORRESPONDING X VALUES AND GRADIENTS ARE ALSO BEING REPLACED'
     4,/)
         FUNCT1=FUNCT2
         GNORM=0.0D00
         DO 150 I=1,NVAR
            XPARAM(I)=XD(I)
            GRAD(I)=GD(I)
  150    GNORM=GNORM+GRAD(I)**2
         GNORM=SQRT(GNORM)
      ENDIF
      GO TO 200
C
C     *
C     UPDATE VARIABLE-METRIC MATRIX
C     *
C
  160 SY=0.0D00
      YHY=0.0D00
      DO 180 I=1,NVAR
         S=0.0D00
         DO 170 K=1,NVAR
            IK=I+NVAR*(K-1)-((K*(K-1))/2)
            IF (K.GT.I) IK=K+NVAR*(I-1)-((I*(I-1))/2)
  170    S=S+HESINV(IK)*(GRAD(K)-GLAST(K))
         GG(I)=S
         Y=GRAD(I)-GLAST(I)
         YHY=YHY+GG(I)*Y
  180 SY=SY+(XPARAM(I)-XLAST(I))*Y
      DO 190 I=1,NVAR
         Y=XPARAM(I)-XLAST(I)
         DO 190 K=I,NVAR
            IK=K+NVAR*(I-1)-((I*(I-1))/2)
            HESINV(IK)=HESINV(IK)+Y*(XPARAM(K)-XLAST(K))
     1              /SY-GG(I)*GG(K)/YHY
  190 CONTINUE
C
C     *
C     ESTABLISH NEW SEARCH DIRECTION
C     *
  200 PNLAST=PNORM
      PNORM=0.0D00
      DOTT=0.0D00
      DO 220 K=1,NVAR
         S=0.0D00
         DO 210 I=1,NVAR
            IK=I+NVAR*(K-1)-((K*(K-1))/2)
            IF (K.GT.I) IK=K+NVAR*(I-1)-((I*(I-1))/2)
            S=S-HESINV(IK)*GRAD(I)
  210    CONTINUE
         PVECT(K)=S
         PNORM=PNORM+PVECT(K)**2
  220 DOTT=DOTT+PVECT(K)*GRAD(K)
      PNORM=SQRT(PNORM)
      COS=-DOTT/(PNORM*GNORM)
      IF (JNRST.EQ.0) GO TO 250
      IF (COS.LE.CNCADD.AND.YEAD.GT.1.0D00) GO TO 230
      IF (COS.LE.RST) GO TO 230
      GO TO 250
  230 PNORM=PNLAST
      IF( PRINT )WRITE (6,240) COS
  240 FORMAT (//,5X, 'SINCE COS=',F9.3,5X,'THE PROGRAM WILL GO TO RE',
     1'START SECTION',/)
      GO TO 70
  250 CONTINUE
      IF ( PRINT ) WRITE (6,260) JCYC,FUNCT1
  260 FORMAT (1H , 'AT THE BEGINNING OF CYCLE',I5, '  THE FUNCTION VA
     1LUE IS ',F13.6/, '  THE CURRENT POINT IS ...')
      IF(PRINT)WRITE (6,270) GNORM,COS
  270 FORMAT ( '  GRADIENT NORM = ',F10.4/,'  ANGLE COSINE =',F10.4)
      NTO6=NVAR/6
      NREM6=NVAR-NTO6*6
      IINC1=-5
      IF (NTO6.LT.1.OR. .NOT. PRINT) GO TO 330
      DO 320 I=1,NTO6
         WRITE (6,'(/)')
         IINC1=IINC1+6
         IINC2=IINC1+5
         WRITE (6,280) (J,J=IINC1,IINC2)
         WRITE (6,290) (XPARAM(J),J=IINC1,IINC2)
         WRITE (6,300) (GRAD(J),J=IINC1,IINC2)
         WRITE (6,310) (PVECT(J),J=IINC1,IINC2)
  280    FORMAT (1H ,3X,  1HI,9X,I3,9(8X,I3))
  290    FORMAT (1H ,1X, 'XPARAM(I)',1X,F9.4,2X,9(F9.4,2X))
  300    FORMAT (1H ,1X, 'GRAD  (I)',F10.4,1X,9(F10.4,1X))
  310    FORMAT (1H ,1X, 'PVECT (I)',1X,F9.4,2X,9(F9.4,2X))
  320 CONTINUE
  330 CONTINUE
      IF (NREM6.LT.1.OR. .NOT. PRINT) GO TO 340
      WRITE (6,'(/)')
      IINC1=IINC1+6
      IINC2=IINC1+(NREM6-1)
      WRITE (6,280) (J,J=IINC1,IINC2)
      WRITE (6,290) (XPARAM(J),J=IINC1,IINC2)
      WRITE (6,300) (GRAD(J),J=IINC1,IINC2)
      WRITE (6,310) (PVECT(J),J=IINC1,IINC2)
  340 CONTINUE
      FI=FUNCT1
      LNSTOP=0
      ALPHA=ALPHA*PNLAST/PNORM
      DO 350 I=1,NVAR
         GLAST(I)=GRAD(I)
  350 XLAST(I)=XPARAM(I)
      IF (JNRST.EQ.0) ALPHA=1.0D00
      YEAD=ABS(ALPHA*DOTT)
      IF(PRINT)WRITE (6,360) YEAD
  360 FORMAT (1H , 13H -ALPHA.P.G =,F18.6,/)
      IF (JNRST.NE.0.AND.YEAD.LT.EYEAD) THEN
         IF(MINPRT)WRITE (6,370)
  370    FORMAT(//,10X,'HERBERTS TEST SATISFIED - GEOMETRY OPTIMISED')
C
C   FLEPO IS ENDING PROPERLY. THIS IS IMMEDIATELY BEFORE THE RETURN.
C
         LAST=1
         CALL COMPFG (XPARAM, .TRUE., FUNCT,.TRUE.,GRAD,.FALSE.)
         IFLEPO=3
         TIME0=TIME0-TOTIME
         RETURN
      ENDIF
      SMVAL=FUNCT1
      CALL LINMIN(XPARAM,ALPHA,PVECT,NVAR,FUNCT1,OKF,OKC)
      NCOUNT=NCOUNT+1
      IF ( .NOT. OKF) THEN
         LNSTOP = 1
         IF(MINPRT)WRITE (6,380)
  380    FORMAT (1H ,///,20X, 'NO POINT LOWER IN ENERGY ',
     1    'THAN THE STARTING POINT COULD BE FOUND ',
     2    'IN THE LINE MINIMIZATION')
         FUNCT1=SMVAL
         DO 390 I=1,NVAR
            GRAD(I)=GLAST(I)
            XPARAM(I)=XLAST(I)
  390    CONTINUE
         IF (JNRST.EQ.0)THEN
            WRITE (6,400)
  400       FORMAT (1H ,//,20X, 'SINCE COS WAS JUST RESET,THE SEARCH',
     1        ' IS BEING ENDED')
C
C             FLEPO IS ENDING BADLY. THIS IS IMMEDIATELYBEFORETHERETURN.
C
            LAST=1
            CALL COMPFG (XPARAM, .TRUE., FUNCT,.TRUE.,GRAD,.FALSE.)
            IFLEPO=4
            TIME0=TIME0-TOTIME
            RETURN
         ENDIF
         IF(PRINT)WRITE (6,410)
  410    FORMAT (1H ,20X, 'COS WILL BE RESET AND ANOTHER '
     1    ,'ATTEMPT MADE')
         COS=0.0D00
         GO TO 570
      ENDIF
C   WE WANT ACCURATE DERIVATIVES AT THIS POINT
C
C   LINMIN DOES NOT GENERATE ANY DERIVATIVES, THEREFORE COMPFG MUST BE
C   CALLED TO END THE SEARCH
C
      IF(RESET) THEN
         DO 420 J=1,NVAR
  420    GRAD(J)=0.D0
         RESET=.FALSE.
      ENDIF
      CALL COMPFG (XPARAM, .TRUE., FUNCT1,.TRUE.,GRAD,.TRUE.)
      IF (.NOT. OKC .AND. MINPRT)WRITE (6,430) JCYC
  430 FORMAT ( 23H0LINMIN FAILED AT CYCLE,I5/,  1H0)
      XN=0.0D00
      DO 440 K=1,NVAR
  440 XN=XN+XPARAM(K)**2
      XN=SQRT(XN)
      TX=ABS(ALPHA*PNORM)
      IF (XN.NE.0.0D00) TX=TX/XN
      TF=ABS(FI-FUNCT1)
      IF (PRINT) WRITE (6,450) NCOUNT,TX,TF,GNORM
  450 FORMAT ( '  TERMINATION TESTS ...',/, '     NUMBER OF COUNTS ='
     1,I5/, '     RELATIVE CHANGE IN X = ',F13.6/, '     RELATIVE CHA'
     2,'NGE IN F = ',F13.6/, '     GRADIENT NORM        = ',F13.6,//)
  460 IF (NCOUNT.GE.MAXEND) THEN
         WRITE (6,470)
  470    FORMAT ( 33H0TERMINATION FROM TOO MANY COUNTS)
         LAST=1
         CALL COMPFG (XPARAM, .TRUE., FUNCT,.TRUE.,GRAD,.FALSE.)
         IFLEPO=5
         TIME0=TIME0-TOTIME
         RETURN
      ENDIF
      IF (TX.LE.TOLERX) THEN
         IF(MINPRT) WRITE (6,480)
  480    FORMAT ( 20H0TEST ON X SATISFIED)
         GO TO 510
      ENDIF
      IF (TF.LE.TOLERF) THEN
         IF(MINPRT) WRITE (6,490)
  490    FORMAT (' HEAT OF FORMATION TEST SATISFIED')
         GO TO 510
      ENDIF
      IF (GNORM.LE.TOLERG*ROOTV) THEN
         IF(MINPRT) WRITE (6,500)
  500    FORMAT ( 27H0TEST ON GRADIENT SATISFIED)
         GOTO 510
      ENDIF
      GOTO 570
  510 DO 550 I=1,NVAR
         IF (ABS(GRAD(I)).GT.TOLERG)THEN
            IREPET=IREPET+1
            IF (IREPET.GT.1) GO TO 520
            FREPF=FUNCT1
            COS=0.0D00
  520       CONTINUE
            IF(MINPRT) WRITE (6,530)TOLERG
  530       FORMAT (20X,'HOWEVER, A COMPONENT OF GRADIENT IS ',
     1     'LARGER THAN',F6.2 ,/)
            IF (ABS(FUNCT1-FREPF).GT.EINC) IREPET=0
            IF (IREPET.GT.IGG1) THEN
               WRITE (6,540)IGG1,EINC
  540          FORMAT (10X,' THERE HAVE BEEN',I2,' ATTEMPTS TO REDUCE TH
     1E ',' GRADIENT.',/10X,' DURING THESE ATTEMPTS THE ENERGY DROPPED',
     2' BY LESS THAN',F4.1,' KCAL/MOLE',/
     310X,' FURTHER CALCULATION IS NOT JUSTIFIED AT THIS TIME.',/
     410X,' TO CONTINUE, START AGAIN WITH THE WORD "PRECISE"' )
               LAST=1
               CALL COMPFG (XPARAM, .TRUE., FUNCT,.TRUE.,GRAD,.FALSE.)
               IFLEPO=8
               TIME0=TIME0-TOTIME
               RETURN
            ELSE
               GOTO 570
            ENDIF
         ENDIF
  550 CONTINUE
      IF(MINPRT) WRITE (6,560)
  560 FORMAT ( 23H PETERS TEST SATISFIED )
      LAST=1
      CALL COMPFG (XPARAM, .TRUE., FUNCT,.TRUE.,GRAD,.FALSE.)
      IFLEPO=6
      TIME0=TIME0-TOTIME
      RETURN
C
C   ALL TESTS HAVE FAILED, WE NEED TO DO ANOTHER CYCLE.
C
  570 CONTINUE
      BSMVF=ABS(SMVAL-FUNCT1)
      IF (BSMVF.GT.10.D00) COS = 0.0D00
      DEL=0.002D00
      IF (BSMVF.GT.1.0D00) DEL=DELL/2.0D00
      IF (BSMVF.GT.5.0D00) DEL=DELL
      TX2 = SECOND ()
      TCYCLE=TX2-TX1
      TX1=TX2
C
C END OF ITERATION LOOP, EVERYTHING IS STILL O.K. SO GO TO
C NEXT ITERATION, IF THERE IS ENOUGH TIME LEFT.
C
      IF(TCYCLE.LT.100000.D0)CYCMX=MAX(CYCMX,TCYCLE)
      TLEFT=TLEFT-TCYCLE
      IF(TLEFT.LT.0)TLEFT=-0.1D0
      IF(TCYCLE.GT.1.D5)TCYCLE=0.D0
      IF(MINPRT) WRITE(6,580)JCYC,TCYCLE,TLEFT,GNORM,FUNCT1
  580 FORMAT(' CYCLE:',I3,' TIME:',F7.2,' TIME LEFT:',F9.1,
     1' GRAD.:',F10.3,' HEAT:',G14.7)
      IF (TLEFT.GT.SFACT*CYCMX) GO TO 40
      WRITE(6,590)
  590 FORMAT (20X, 42HTHERE IS NOT ENOUGH TIME FOR ANOTHER CYCLE,/,30X,
     118HNOW GOING TO FINAL)
      MDFP(9)=1
      TOTIME=TOTIME   +   SECOND()-TIME0
      CALL DFPSAV(TOTIME,XPARAM,GD,XLAST,FUNCT1,MDFP,XDFP)
C
C
      END
