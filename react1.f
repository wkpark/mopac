      SUBROUTINE REACT1(ESCF)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INCLUDE 'SIZES'
      COMMON /GEOM  / GEO(3,NUMATM)
      DIMENSION GEOA(3,NUMATM), GEOVEC(3,NUMATM),
     +          P1STOR(MPACK), P2STOR(MPACK),
     1          P3STOR(MPACK), XOLD(MAXPAR), GROLD(MAXPAR)
      COMMON /GEOKST/ NATOMS,LABELS(NUMATM),
     +                NA(NUMATM), NB(NUMATM), NC(NUMATM)
      COMMON /DENSTY/ P(MPACK),PA(MPACK),PB(MPACK)
      COMMON /GEOVAR/ NVAR,LOC(2,MAXPAR), XPARAM(MAXPAR) 
      COMMON /GRADNT/ GRAD(MAXPAR),GNORM
      COMMON /GRAVEC/ COSINE
      COMMON /KEYWRD/ KEYWRD
      COMMON /REACTN/ STEP, GEOA, GEOVEC,CALCST
      LOGICAL GRADNT, FINISH
*************************************************************************
*
*  REACT1 DETERMINES THE TRANSITION STATE OF A CHEMICAL REACTION. 
*
*   REACT WORKS BY USING TWO SYSTEMS SIMULTANEOUSLY, THE HEATS OF FORMATION
*   OF BOTH ARE CALCULATED, THEN THE MORE STABLE ONE IS MOVED IN THE 
*   DIRECTION OF THE OTHER. AFTER A STEP THE ENERGIES ARE COMPARED, AND
*   THE NOW LOWER-ENERGY FORM IS MOVED IN THE DIRECTION OF THE HIGHER-
*   ENERGY FORM. THIS IS REPEATED UNTIL THE SADDLE POINT IS REACHED.
*
*   IF ONE FORM IS MOVED 3 TIMES IN SUCCESSION, THEN THE HIGHER ENERGY
*   FORM IS RE-OPTIMIZED WITHOUT SHORTENING THE DISTANCE BETWEEN THE TWO
*   FORMS. THIS REDUCES THE CHANCE OF BEING CAUGHT ON THE SIDE OF A
*   TRANSITION STATE.
*
*************************************************************************
      DIMENSION IDUMY(NUMATM), DUMY(NUMATM), XSTORE(MAXPAR)
      CHARACTER*80 KEYWRD
      GRADNT=(INDEX(KEYWRD,'GRADI') .NE. 0)
      I=(INDEX(KEYWRD,' BAR='))
      STEPMX=0.15D0
      IF(I.NE.0) STEPMX=READA(KEYWRD,I)
      MAXSTP=30
C
C    READ IN THE SECOND GEOMETRY.
C
      CALL GETGEO(5,IDUMY,GEOA,IDUMY,IDUMY,IDUMY,IDUMY,DUMY,NATOMS)
      SUM=0.D0
      TIME0= SECOND()
C
C  SWAP FIRST AND SECOND GEOMETRIES AROUND
C  SO THAT GEOUT CAN OUTPUT DATA ON SECOND GEOMETRY.
C
      DO 10 I=1,NATOMS
      CONST=1.D0
      DO 10 J=1,3
      X=GEOA(J,I)*CONST
      CONST=0.0174532925D0
      GEOA(J,I)=GEO(J,I)
      GEO(J,I)=X
      GEOVEC(J,I)=GEOA(J,I)-GEO(J,I)
      SUM=SUM+GEOVEC(J,I)**2
  10  CONTINUE
      WRITE(6,'(//10X,'' GEOMETRY OF SECOND SYSTEM'',/)')
      CALL GEOUT
C
C   XPARAM HOLDS THE VARIABLE PARAMETERS FOR GEOMETRY IN GEO
C   XOLD   HOLDS THE VARIABLE PARAMETERS FOR GEOMETRY IN GEOA
C
      DO 11 I=1,NVAR
      GROLD(I)=1.D0
      XPARAM(I)=GEO(LOC(2,I),LOC(1,I))
  11  XOLD(I)=GEOA(LOC(2,I),LOC(1,I))
      SUMA=0.D0
      DO 20 I=1,NATOMS
      DO 20 J=1,3
      SUMA=SUMA+GEOVEC(J,I)**2
  20  CONTINUE
      STEP0=SQRT(SUMA)
      ONE=1.D0
      DELL=0.1D0
      EOLD=-2000.D0
      TIME1=SECOND()
      SWAP=0
      DO 25 ILOOP=1,MAXSTP
      TIME2=SECOND()
      WRITE(6,'('' TIME='',F9.2)')TIME2-TIME1
      TIME1=TIME2
C
C   THIS METHOD OF CALCULATING 'STEP' IS QUITE ARBITARY, AND NEEDS
C   TO BE IMPROVED BY INTELLIGENT GUESSWORK!
C
      IF (GNORM.LT.1.D-3)GNORM=1.D-3
      WRITE(6,'('' CURRENT BAR, STEPMX, GNORM'',3F12.7)')
     +STEP0,STEPMX,GNORM
      STEP=MIN(SWAP,0.5D0, 6.D0/GNORM, DELL,STEPMX*STEP0+0.005D0)
      SWAP=SWAP+1.D0
      DELL=DELL+0.1
      STEP0=STEP0-STEP
      IF(STEP0.LT.0.01D0) GOTO 100
      STEP=STEP0
      DO 32 I=1,NVAR
  32  XSTORE(I)=XPARAM(I)
      CALL FLEPO(XPARAM, NVAR, ESCF)
      DO 23 I=1,NVAR
  23  XPARAM(I)=GEO(LOC(2,I),LOC(1,I))
      WRITE(6,'(//10X,''FOR POINT'',I3)')ILOOP
      WRITE(6,'('' DISTANCE A - B  '',F12.6)')STEP
C
C   NOW TO CALCULATE THE "CORRECT" GRADIENTS, SWITCH OFF 'STEP'.
C
      STEP=0.D0
      DO 29 I=1,NVAR
  29  GRAD(I)=GROLD(I)
      CALL COMPFG (XPARAM, .TRUE., FUNCT1,.FALSE.,GRAD,.TRUE.)
      DO 31 I=1,NVAR
  31  GROLD(I)=GRAD(I)
      IF (GRADNT) THEN
          WRITE(6,'(''  ACTUAL GRADIENTS OF THIS POINT'')')
          WRITE(6,'(8F10.4)')(GRAD(I),I=1,NVAR)
      ENDIF
      WRITE(6,'('' HEAT            '',F12.6)')FUNCT1
      GNORM=SQRT(DOT(GRAD,GRAD,NVAR))
      WRITE(6,'('' GRADIENT NORM   '',F12.6)')GNORM
      COSINE=COSINE*ONE
      WRITE(6,'('' DIRECTION COSINE'',F12.6)')COSINE
      CALL GEOUT
      IF(SWAP.GT.2.9D0 .OR. ILOOP .GT. 3 .AND. COSINE .LT. 0.D0 
     +  .OR. ESCF .GT. EOLD)
     +  THEN
      IF(SWAP.GT.2.9D0)THEN
        SWAP=0.D0
      ELSE
        SWAP=0.5D0
      ENDIF
C
C   SWAP REACTANT AND PRODUCT AROUND
C
      IF(EOLD.LT.-1000) THEN
      DO 21 I=1,MPACK
      P1STOR(I)=P(I)
      P2STOR(I)=PA(I)
  21  P3STOR(I)=PB(I)
      ENDIF
      FINISH=(ILOOP .GT. 3 .AND. COSINE .LT. 0.D0) 
      IF(FINISH) THEN
      WRITE(6,'(//10X,'' BOTH SYSTEMS ARE ON THE SAME SIDE OF THE '',
     +''TRANSITION STATE -'',/10X,'' GEOMETRIES OF THE SYSTEMS'',
     +'' ON EACH SIDE OF THE T.S. ARE AS FOLLOWS'')')
      DO 33 I=1,NVAR
  33  XPARAM(I)=XSTORE(I)
      CALL COMPFG (XPARAM, .TRUE., FUNCT1,.TRUE.,GRAD,.TRUE.)
      WRITE(6,'(//10X,'' GEOMETRY ON ONE SIDE OF THE TRANSITION'',
     +'' STATE'')')
      CALL WRITE(TIME0,FUNCT1)
      ENDIF
      WRITE(6,'(''  REACTANTS AND PRODUCTS SWAPPED AROUND'')')
      ONE=-1.D0
      EOLD=ESCF
      SUM=GOLD
      GOLD=GNORM
      GNORM=SUM
      DO 27 I=1,NATOMS
      DO 27 J=1,3
      X=GEO(J,I)
      GEO(J,I)=GEOA(J,I)
  27  GEOA(J,I)=X
      DO 22 I=1,NVAR
      X=XOLD(I)
      XOLD(I)=XPARAM(I)
  22  XPARAM(I)=X
C
C    I'VE NOT HAD TIME TO WORK OUT THE CORRECT SIZE OF THE DENSITY MATRICES
C    SO 6000 IS AN ARBITARY LARGE NUMBER.  THIS SHOULD BE FIXED.
C
C    SWAP AROUND THE DENSITY MATRICES.
C
      DO 28 I=1,MPACK
      X=P1STOR(I)
      P1STOR(I)=P(I)
      P(I)=X
      X=P2STOR(I)
      P2STOR(I)=PA(I)
      PA(I)=X
      X=P3STOR(I)
      P3STOR(I)=PB(I)
      PB(I)=X
  28  CONTINUE
      IF(FINISH) GOTO 100
      ELSE
      ONE=1.D0
      ENDIF
  25  CONTINUE
  100 CONTINUE
      WRITE(6,'('' AT END OF REACTION'')')
      GOLD=SQRT(DOT(GRAD,GRAD,NVAR))
      CALL COMPFG (XPARAM, .TRUE., FUNCT1,.TRUE.,GRAD,.TRUE.)
      GNORM=SQRT(DOT(GRAD,GRAD,NVAR))
      CALL WRITE(TIME0,FUNCT1)
*
* THE GEOMETRIES HAVE (A) BEEN OPTIMISED CORRECTLY, OR
*                     (B) BOTH ENDED UP ON THE SAME SIDE OF THE T.S.
*
*  TRANSITION STATE LIES BETWEEN THE TWO GEOMETRIES
*
          C1=GOLD/(GOLD+GNORM)
          C2=1.D0-C1
      WRITE(6,'('' BEST ESTIMATE GEOMETRY OF THE TRANSITION STATE'')')
      WRITE(6,'(//10X,'' C1='',F8.3,''C2='',F8.3)')C1,C2
          DO 101 I=1,NVAR
  101  XPARAM(I)=C1*XPARAM(I)+C2*XOLD(I)
      CALL COMPFG (XPARAM, .TRUE., FUNCT1,.TRUE.,GRAD,.TRUE.)
      CALL WRITE(TIME0,FUNCT1)
      STOP
      END
