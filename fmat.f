      SUBROUTINE FMAT(GEO, FMATRX, TSCF, TDER, DELDIP, HEATAA)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INCLUDE 'SIZES'
      DIMENSION GEO(3,*), FMATRX(*), DELDIP(3,*)
***********************************************************************
*
*  VALUE CALCULATES THE SECOND-ORDER OF THE ENERGY WITH
*        RESPECT TO THE CARTESIAN COORDINATES I AND J AND PLACES IT
*        IN FMATRX
*
*  ON INPUT NATOMS  = NUMBER OF ATOMS IN THE SYSTEM.
*           XPARAM  = INTERNAL COORDINATES OF MOLECULE STORED LINEARLY
*
*  VARIABLES USED
*           COORDL  = ARRAY OF CARTESIAN COORDINATES, STORED LINEARLY.
*           I       = INDEX OF CARTESIAN COORDINATE.
*           J       = INDEX OF CARTESIAN COORDINATE.
*
*  ON OUTPUT FMATRX = SECOND DERIVATIVE OF THE ENERGY WITH RESPECT TO
*                    CARTESIAN COORDINATES I AND J.
***********************************************************************
      COMMON /KEYWRD/ KEYWRD
      COMMON /GEOKST/ NATOMS,LABELS(NUMATM),
     +                NA(NUMATM),NB(NUMATM),NC(NUMATM)
      COMMON /GEOVAR/ NVAR,LOC(2,MAXPAR),DUMY(MAXPAR)
      COMMON /DENSTY/ P(MPACK),PDUMY(2,MPACK)
      COMMON /TIME  / TIME0
      COMMON /CORE  / CORE(54)
      COMMON /MOLKST/ NDUMY(4,NUMATM),NDUMY2(5), NCLOSE, NOPEN
      DIMENSION COLD(MAXPAR), GRAD(MAXPAR), COORD(3,NUMATM),
     +GROLD(MAXPAR), COORDL(MAXPAR), LABL(MAXPAR), Q(NUMATM), DEL2(3)
      CHARACTER*80 KEYWRD
      LOGICAL DEBUG, DERIV, RESTRT
      EQUIVALENCE (COORD(1,1),COORDL(1))
      DATA FACT/6.95125D-3/
C
C    FACT IS THE CONVERSION FACTOR FROM KCAL/MOLE TO ERGS
C
C SET UP CONSTANTS AND FLAGS
      CALL GMETRY(GEO,COORD)
      NA(1)=99
C
C  SET UP THE VARIABLES IN XPARAM AND LOC, THESE ARE IN CARTESIAN COORDINATES.
C
      NUMAT=0
      DO 10 I=1,NATOMS
          IF(LABELS(I).NE.99) THEN
              NUMAT=NUMAT+1
              LABELS(NUMAT)=LABELS(I)
          ENDIF
  10  CONTINUE
      NATOMS=NUMAT
C
C   THIS IS A QUICK, IF CLUMSY, WAY TO CALCULATE NUMAT, AND TO REMOVE THE
C   DUMMY ATOMS FROM THE ARRAY LABELS.
C
      NVAR=0
      DO 11 I=1,NUMAT
          DO 11 J=1,3
              NVAR=NVAR+1
              LOC(1,NVAR)=I
              LOC(2,NVAR)=J
  11  CONTINUE
      LIN=(NVAR*(NVAR+1))/2
      DO 28 I=1,LIN
  28  FMATRX(I)=0.D0
      RESTRT =(INDEX(KEYWRD,'RESTART') .NE. 0)
      IF(INDEX(KEYWRD,'NLLSQ') .NE. 0) RESTRT=.FALSE.
      DEBUG =(INDEX(KEYWRD,'FMAT') .NE. 0)
      DERIV=(NCLOSE .EQ. NOPEN .AND. INDEX(KEYWRD,'C.I.') .EQ. 0)
      IF(DERIV) THEN
      WRITE(6,'(//4X,''FIRST DERIVATIVES WILL BE USED IN THE''
     +,'' CALCULATION OF SECOND DERIVATIVES'')')
      ELSE
      WRITE(6,'(/1X,''FULL SCF CALCULATIONS ARE NEEDED FOR EVERY'',
     +'' ELEMENT IN THE FORCE MATRIX'')')
      ENDIF
      I     =INDEX(KEYWRD,' T=')
      IF( I .NE. 0 ) THEN
          TIME=READA(KEYWRD,I)
          WRITE(6,'(/10X,''TIME DEFINED FOR THIS STEP ='',F19.2,
     +    '' SECONDS'')')TIME
      ELSE
          TIME=3600
          WRITE(6,'(/10X,''DEFAULT TIME OF'',F8.2,
     +    '' SECONDS ALLOCATED FOR THIS STEP'')')TIME
      ENDIF
      TLEFT  = TIME-SECOND()+TIME0
      IF(RESTRT) THEN
          ISTART = 0
          I=0
          CALL FORSAV(TOTIME,DELDIP,ISTART,I,FMATRX, COORD, NVAR)
          KOUNTF=(ISTART*(ISTART+1))/2
          ISTART=ISTART+1
          ELSE
          TOTIME=0.D0
          IF (TSCF.GT.0.D0)TLEFT=TLEFT-TSCF-TDER
          ISTART=1
      ENDIF
      CONST=30
      DELTA =0.5D0/CONST
C CALCULATE FMATRX
      IF(DERIV) THEN
          IF(ISTART.GT.1) THEN
              ESTIME=(NVAR-ISTART+1)*TOTIME/(ISTART-1.D0)
              ELSE
              ESTIME=NVAR*(TSCF+TDER)*2.D0
              ENDIF
          ELSE
          IF(ISTART.GT.1) THEN
              ESTIME=(NVAR*(NVAR+1)-ISTART*(ISTART-1))
     +               *TOTIME/(ISTART*(ISTART-1))
              ELSE
              ESTIME=2.D0*NVAR*(NVAR+1)*TSCF
          ENDIF
      ENDIF
      IF(TSCF.GT.0)
     +WRITE(6,'(/10X,''ESTIMATED TIME TO COMPLETE CALCULATION =''
     +,F9.2,'' SECONDS'')')ESTIME
      IF(RESTRT) THEN
          IF(ISTART.LE.NVAR)
     +    WRITE(6,'(/10X,''STARTING AGAIN AT LINE'',18X,I4)')ISTART
          WRITE(6,'(/10X,''TIME USED UP TO RESTART ='',F22.2)')TOTIME
      ENDIF
      LU=KOUNTF
      TIME1 = SECOND()
      NUMAT=NVAR/3
      DO 30 I=ISTART,NVAR
         TIME2 = SECOND()
         IF(DERIV) THEN
             COORDL(I)=COORDL(I)+DELTA*0.5D0
             CALL COMPFG(COORDL, .TRUE., HEATAA, .TRUE., GROLD, .TRUE.)
             CALL CHRGE(P,Q)
C#         WRITE(6,'('' DELTA'',F12.6)')DELTA
C#         WRITE(6,'('' GROLD'',6F12.6)')(GROLD(J),J=1,NVAR)
             DO 34 II=1,NUMAT
  34         Q(II)=CORE(LABELS(II))-Q(II)
             SUM = DIPOLE(P,Q,COORDL,DELDIP(1,I))
C#             WRITE(6,'(''I,DIPOLE'',I3,3F12.6)')I,(DELDIP(J,I),J=1,3)
             COORDL(I)=COORDL(I)-DELTA
             CALL COMPFG(COORDL, .TRUE., HEATAA, .TRUE., GRAD, .TRUE.)
             CALL CHRGE(P,Q)
C#         WRITE(6,'('' GRAD'',6F12.6)')(GRAD(J),J=1,NVAR)
             DO 35 II=1,NUMAT
  35         Q(II)=CORE(LABELS(II))-Q(II)
             SUM = DIPOLE(P,Q,COORDL,DEL2)
C#             WRITE(6,'(''I,DIPOLE'',I3,3F12.6)')I,(DEL2(J),J=1,3)
             DO 36 II=1,3
  36         DELDIP(II,I)=(DELDIP(II,I)-DEL2(II))*CONST
             LL=LU+1
             LU=LL+I-1
             L=0
             DO 31 KOUNTF=LL,LU
             L=L+1
  31         FMATRX(KOUNTF)=FMATRX(KOUNTF)+
     +                  (GROLD(L)-GRAD(L))*CONST*FACT*0.5D0
             L=L-1
             DO 32 K=I,NVAR
             L=L+1
             KK=(K*(K-1))/2+I
  32         FMATRX(KK)=FMATRX(KK)+
     +                  (GROLD(L)-GRAD(L))*CONST*FACT*0.5D0
             COORDL(I)=COORDL(I)+DELTA*0.5D0
             ELSE    
         DO 40 J=1,I
         IF(LABL(J) .EQ. 99) GOTO 40
            KOUNTF=KOUNTF+1
C         FIND SECOND DERIVATIVE
C          GO AROUND A SQUARE OF SIDE 2*DELTA AND COMPUTE ENERGY
            COORDL(I)=COORDL(I)+DELTA
            COORDL(J)=COORDL(J)+DELTA
            CALL COMPFG(COORDL, .TRUE., HEATAA, .TRUE., GRAD, .FALSE.)
            COORDL(J)=COORDL(J)-DELTA*2.D0
            CALL COMPFG(COORDL, .TRUE., HEATAB, .TRUE., GRAD, .FALSE.)
            COORDL(I)=COORDL(I)-DELTA*2.D0
            CALL COMPFG(COORDL, .TRUE., HEATBB, .TRUE., GRAD, .FALSE.)
            COORDL(J)=COORDL(J)+DELTA*2.D0
            CALL COMPFG(COORDL, .TRUE., HEATBA, .TRUE., GRAD, .FALSE.)
C
C   FIJ IS CALCULATED FROM (SUM OF THE TWO DIAGONAL TERMS - SUM OF THE
C       OTHER TWO DIAGONAL TERMS) TIMES VARIOUS CONSTANTS.
C
            FIJ = 0.5D0*(HEATAA+HEATBB-(HEATAB+HEATBA))
     +                  *CONST*CONST*FACT
C
C NOW TO RETURN TO THE CENTRE OF THE SQUARE.
C
            COORDL(I)=COORDL(I)+DELTA
            COORDL(J)=COORDL(J)-DELTA
C
  40  FMATRX(KOUNTF)=FIJ
      ENDIF
      TIME3 = SECOND()
      TSTEP=TIME3-TIME2
      TOTIME= TOTIME+TSTEP
      TLEFT= TLEFT-TSTEP
      WRITE(6,'('' STEP:'',I4,'' TIME ='',F9.2,'' SECS, INTEGRAL ='',
     +F10.2,'' TIME LEFT:'',F10.2)')I,TSTEP,TOTIME,TLEFT
      IF(DERIV) THEN
            ESTIM = TOTIME/I
            ELSE
            ESTIM = TOTIME*2.D0/I
      ENDIF
      IF(I.NE.NVAR.AND.TLEFT-10.D0 .LT. ESTIM) THEN
      WRITE(6,'(//10X,''- - - - -  TIME  LIMIT - - - - -'')')
      WRITE(6,'(/10X,'' POINT REACHED ='',I4)')I
      WRITE(6,'(/10X,'' RESTART USING KEY-WORD "RESTART"'')')
      WRITE(6,'(10X,''ESTIMATED TIME FOR THE NEXT STEP ='',F8.2,
     +'' SECONDS'')')ESTIM
      CALL FORSAV(TOTIME,DELDIP,I,NVAR,FMATRX, COORD,NVAR)
      ENDIF
  30  CONTINUE
      IF(ISTART.LE.NVAR .AND. INDEX(KEYWRD,'ISOTOPE') .NE. 0)
     +CALL FORSAV(TOTIME,DELDIP,NVAR,NVAR,FMATRX, COORD,NVAR)
      RETURN
      END
